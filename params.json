{
  "name": "Tweetnacl-java",
  "tagline": "Porting TweetNacl in Java",
  "body": "rewrite tweetnacl.c in pure Java\r\n\r\n\r\n### API/Usage\r\n\r\n#### Public key authenticated encryption\r\n\r\n* get key pair: Box.KeyPair kp = Box.keyPair(), kp = Box.keyPair_fromSecretKey(sk)\r\n* new Box object: Box box = new Box(theirPublicKey, mySecretKey, Nonce);\r\n* encryption: cipher = box.box(message);\r\n* decryption: message = box.open(cipher);\r\n* Nonce MUST be unique for ever message passed between same peers\r\n\r\n\r\n#### Secret key authenticated encryption\r\n\r\n* get shared key: crypto random, what you have\r\n* new SecretBox object: SecretBox sbox = new SecretBox(sharedKey, Nonce);\r\n* encryption: cipher = sbox.box(message);\r\n* decryption: message = sbox.open(cipher);\r\n* Nonce MUST be unique for ever message passed between same peers\r\n\r\n\r\n### Signature\r\n\r\n* get key pair: Signature.KeyPair kp = Signature.keyPair(), kp = Signature.keyPair_fromSecretKey(sk);\r\n* new Signature object: Signature sig = new Signature(theirPublicKey, mySecretKey);\r\n* sign: signedMessage = sig.sign(message);\r\n* verify: message = sig.open(signedMessage);\r\n* Nonce MUST be unique for ever message passed between same peers\r\n\r\n\r\n### Hash\r\n\r\n* generate SHA-512: byte [] tag = Hash.sha512(message);\r\n\r\n\r\n### Refer to com.iwebpp.crypto.tests for details\r\n\r\n\r\n### License MIT\r\n\r\n* Copyright(2014-2015) by tom zhou, iwebpp@gmail.com\r\n\r\n\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}